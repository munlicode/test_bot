from typing import List, Tuple, Dict
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut, GeocoderUnavailable
import time

class DeliveryZoneCalculator:
    def __init__(self):
        # Define restaurant locations
        self.aruna_location = (51.1384913473427, 71.37443687515254)
        self.kazhimukan_location = (51.1532007142996, 71.46589024548983)
        
        # Initialize geocoder
        self.geocoder = Nominatim(user_agent="delivery_bot")
        
        # Initialize zone coordinates
        self.zones = self._initialize_zones()
        
    def _initialize_zones(self) -> Dict:
        """Initialize all delivery zone coordinates"""
        # Aruna zones
        aruna_green = [
    	[71.36666919784538,51.143998660118136],
   	    [71.36229924624948,51.13259512960473],
    	[71.36723451083692,51.13193358279082],
    	[71.37447647517709,51.13098849939789],
    	[71.37622701590186,51.13079881131089],
    	[71.37819296076157,51.130535797830724],
    	[71.3826435254092,51.12994498833629],
    	[71.384029447578,51.134241800013456],
    	[71.3848019237743,51.136374809591175],
    	[71.38555194931021,51.138275360850386],
    	[71.38600256042473,51.139517269403484],
    	[71.38622786598194,51.14000997382253],
    	[71.38653900222762,51.14051617147811],
    	[71.39113094406112,51.13989523490355],
    	[71.38834144668571,51.14135307269928],
    	[71.3868394096373,51.14229794284749],
    	[71.38450052337632,51.144336096534666],
    	[71.3827624519347,51.14575330239289],
    	[71.38198997573845,51.147858784612225],
    	[71.38078834609976,51.147453891684236],
    	[71.37658264236443,51.14675206881676],
    	[71.37417938308707,51.146698081997954],
    	[71.37160446243277,51.146968015457105],
    	[71.36920120315543,51.1477778063123],
    	[71.36808540420522,51.14734591963367],
    	[71.36666919784538,51.143998660118136]
        ]
        
        aruna_yellow = [
            [71.35985044840591,51.12629657231027],
        [71.35998590474914,51.12617474198384],
        [71.36015756612629,51.12630976922863],
        [71.36326892858175,51.126012708980184],
        [71.37058599477444,51.12502699454174],
        [71.3781498241964,51.12402775558409],
        [71.38657196050318,51.123136524126025],
        [71.38879501685325,51.12903347729845],
        [71.39617645606252,51.12804782765806],
        [71.39925162785997,51.1375048995528],
        [71.40515921237734,51.146150219211364],
        [71.40523767657193,51.14615347255727],
        [71.40634610902833,51.14874805214354],
        [71.39724068955597,51.15064072168554],
        [71.39508755585025,51.15091388496437],
        [71.39213991031824,51.15071953364737],
        [71.38292662452746,51.15041721667993],
        [71.38012242608997,51.151480651120515],
        [71.37863464466294,51.1531655082335],
        [71.37826266218613,51.153905691662345],
        [71.3782482580847,51.15409056521123],
        [71.37821239631094,51.154113503912185],
        [71.37156404473927,51.15544741807241],
        [71.3716963175573,51.155350933861804],
        [71.36641833516921,51.15615198983644],
        [71.36234198241976,51.15619737853382],
        [71.35950651529481,51.15060638161906],
        [71.35907093357093,51.14969124788837],
        [71.35900013227301,51.14954536726678],
        [71.35883855951134,51.14951044447946],
        [71.35712374559391,51.1453967984476],
        [71.3554903965842,51.14250280062502],
        [71.35484538345636,51.140839758861325],
        [71.35428620101705,51.13879868545261],
        [71.36205656053299,51.13230350313588],
        [71.36828196765651,51.1478387740331],
        [71.37311136880679,51.14682774717324],
        [71.37639581756464,51.146896443086376],
        [71.38227806957231,51.147897609770475],
        [71.38339956821659,51.14525709753393],
        [71.38739639492486,51.14202252144484],
        [71.39139322163318,51.139759637936436],
        [71.38672684849959,51.140579257984356],
        [71.38309044362762,51.12984289023101],
        [71.36236501456953,51.132365944955595],
        [71.3543076586886,51.13878518641098],
        [71.35985044840591,51.12629657231027]
        ]
        
        aruna_blue = [
        [71.3571373987733,51.14953456969694],
        [71.35374708657844,51.1443141243884],
        [71.35359689849867,51.14442737102745],
        [71.35602698377244,51.14368632600702],
        [71.35905788386556,51.14969368097478],
        [71.362287271332,51.15614686847616],
        [71.36677622141751,51.156332074001],
        [71.37169432494538,51.1555457130309],
        [71.37182521440155,51.155339858345826],
        [71.37187081390786,51.15540798743863],
        [71.37187215598897,51.1554960284834],
        [71.37530672560911,51.154828393519324],
        [71.37852806058918,51.15416782524924],
        [71.3789253630436,51.15321484740649],
        [71.38026680307135,51.15150611924333],
        [71.38346466725767,51.15067968931089],
        [71.38860411525044,51.15067133689274],
        [71.3923754688855,51.150883088908266],
        [71.39623525153799,51.151042946325106],
        [71.40241246277937,51.14985324450684],
        [71.40668321057157,51.14875686346289],
        [71.40675295191225,51.14854224198255],
        [71.40433360328714,51.14438655013759],
        [71.39976848745012,51.13769267261969],
        [71.39619846920439,51.12770271860615],
        [71.38897595136785,51.128837062132334],
        [71.38690327483991,51.122949993952055],
        [71.38060980690665,51.12355773845043],
        [71.36002552934217,51.126217936062034],
        [71.35949780520684,51.12673120169314],
        [71.3542004443555,51.139059750615395],
        [71.35499706238602,51.141397356724845],
        [71.35594656828364,51.14358871582853],
        [71.3535540456549,51.144596911724285],
        [71.35361843429644,51.14442671354451],
        [71.35100062954822,51.13976691842207],
        [71.35353250985733,51.1257649328894],
        [71.35645075326552,51.11836476675786],
        [71.3659779596865,51.117230329386004],
        [71.38709230905174,51.11479929786263],
        [71.40022440438861,51.113070486109294],
        [71.4064900446474,51.11220605584104],
        [71.41073866372716,51.11161175060355],
        [71.41058846002242,51.111638764640865],
        [71.41335649972578,51.125656909825956],
        [71.4146417429853,51.133193985440606],
        [71.41627474313366,51.13667395283355],
        [71.41867800241107,51.14099364062835],
        [71.42151041513088,51.14531292211515],
        [71.42352743631018,51.14855211660566],
        [71.42575903421064,51.15017162814678],
        [71.42734690194716,51.15119728923866],
        [71.41653223519913,51.1591318926807],
        [71.4092366266789,51.165176384178956],
        [71.39370127206453,51.167550787991445],
        [71.39022512918119,51.16868398286147],
        [71.3893239069522,51.16647152876358],
        [71.38486071115139,51.16452879817183],
        [71.38179762845607,51.16467502722923],
        [71.37590213304104,51.16730360337508],
        [71.37449665551736,51.16233441995815],
        [71.37271030431381,51.15719048559925],
        [71.37278272395724,51.157086923747265],
        [71.37229322081204,51.15577662225514],
        [71.36219939773666,51.15669634772333],
        [71.36190536057339,51.156442674005426],
        [71.35951601525497,51.15319443913401],
        [71.3571373987733,51.14953456969694]
        ]
        
        # Kazhimukan zones
        kazhimukan_green = [
    [71.45393295770228,51.155173443026364],
    [71.45929737573204,51.14761605717855],
    [71.46032734399371,51.14621240567538],
    [71.46590633874467,51.14626639306529],
    [71.47112055306958,51.14767004292246],
    [71.4704124498897,51.14901966577277],
    [71.48066921716268,51.151664811471264],
    [71.47654934411577,51.157238012404385],
    [71.47584124093586,51.158283755574345],
    [71.47195740228231,51.159761248852625],
    [71.47102399354512,51.16001761270896],
    [71.46834714894827,51.160941859979104],
    [71.4661718774372,51.15948127090613],
    [71.46466179376183,51.15895166938478],
    [71.4604990053707,51.15773727340415],
    [71.45393295770228,51.155173443026364]
        ]
        
        kazhimukan_yellow = [
    [71.44443815764201,51.15187398764671],
    [71.46043222496125,51.15788401486428],
    [71.4655687101877,51.15944079226232],
    [71.4682885800557,51.161204963697124],
    [71.47614289384451,51.15809484912833],
    [71.48068043532636,51.15157371866319],
    [71.4704678901753,51.148917602171586],
    [71.4713275038384,51.147664981996755],
    [71.466059989645,51.1461963783923],
    [71.46017031738562,51.14605592647609],
    [71.45364299953621,51.15510871312864],
    [71.44446467747986,51.15188885344672],
    [71.44479158846737,51.14998624366991],
    [71.44876630371512,51.14719279023706],
    [71.45628324728591,51.14095745480154],
    [71.46088524346759,51.13490064791259],
    [71.46382494454778,51.13604814891675],
    [71.4671937990704,51.136871631963736],
    [71.48830814843573,51.14281107236363],
    [71.4932004976786,51.15174578315357],
    [71.4762060213606,51.166992858667456],
    [71.47128878969991,51.16842827997237],
    [71.46324838325938,51.16611327492536],
    [71.46018615675108,51.16698208027708],
    [71.45270364978555,51.162832131130834],
    [71.44604415289473,51.161661009710265],
    [71.44195957665825,51.15930248914107],
    [71.44443815764201,51.15187398764671]
        ]
        
        kazhimukan_blue = [
    [71.42452909740793,51.16047199347662],
    [71.42710401806222,51.15682882982283],
    [71.42862226650858,51.15388075154782],
    [71.42850973187394,51.152443951420146],
    [71.42991958999573,51.151593728682904],
    [71.43145819415027,51.15101339987169],
    [71.43617570789738,51.15034535634237],
    [71.43977742269439,51.148327699569776],
    [71.44260348717607,51.14456206758828],
    [71.4432136458443,51.14051257330937],
    [71.44708537067466,51.13430271570243],
    [71.44944145473823,51.1312915832526],
    [71.45602896007888,51.13350573344169],
    [71.45890428814286,51.13453176685496],
    [71.46062090191238,51.13499077438279],
    [71.45568563732499,51.14138940160394],
    [71.45049288067207,51.145519687433534],
    [71.44461347851143,51.149919517850485],
    [71.44160940441486,51.159311609772665],
    [71.44581510815021,51.16174028628132],
    [71.45255281719554,51.16287362466422],
    [71.46014617549221,51.167041040491135],
    [71.46336748394357,51.16616554407718],
    [71.47129580261556,51.168498143870046],
    [71.476585409969,51.16700197777223],
    [71.4932794788777,51.1521867504811],
    [71.48795797619215,51.14279320055567],
    [71.46100714001054,51.135017774680456],
    [71.4496345737872,51.1312105757386],
    [71.45860388073302,51.1296714057428],
    [71.45821764263486,51.12864526376213],
    [71.45843221935608,51.12783513547722],
    [71.45959093365055,51.12729504202175],
    [71.46186544689526,51.12675494221245],
    [71.46691726892055,51.12541976459988],
    [71.46853878292427,51.12491855538446],
    [71.4690001228748,51.124810530341854],
    [71.46924688610416,51.12491855538742],
    [71.47041632923468,51.127598845376475],
    [71.47652103695265,51.12663341888465],
    [71.47675631920895,51.12654784514052],
    [71.47937490734452,51.131723620939354],
    [71.48117735180246,51.13441026410259],
    [71.4914770344196,51.13731274217502],
    [71.50392248424873,51.14311714807233],
    [71.50890066418033,51.15272655127681],
    [71.50478079113346,51.1574765244986],
    [71.48838712963446,51.16487039085293],
    [71.47233679088936,51.16907950516746],
    [71.45748808178293,51.168162167008845],
    [71.44847585949293,51.170860168051306],
    [71.43933489117015,51.169673067141616],
    [71.43993570598946,51.1670289592549],
    [71.4275546291767,51.165558445560606],
    [71.42452909740793,51.16047199347662]
        ]
        
        # Convert coordinates to (lat, lon) format
        zones = {
            'aruna': {
                'green': [[coord[1], coord[0]] for coord in aruna_green],
                'yellow': [[coord[1], coord[0]] for coord in aruna_yellow],
                'blue': [[coord[1], coord[0]] for coord in aruna_blue]
            },
            'kazhimukan': {
                'green': [[coord[1], coord[0]] for coord in kazhimukan_green],
                'yellow': [[coord[1], coord[0]] for coord in kazhimukan_yellow],
                'blue': [[coord[1], coord[0]] for coord in kazhimukan_blue]
            }
        }
        return zones

    def geocode_address(self, address: str) -> Tuple[float, float]:
        """
        Convert address to coordinates using geocoding service
        
        Args:
            address: String address to geocode
            
        Returns:
            Tuple of (latitude, longitude)
            
        Raises:
            ValueError: If address cannot be geocoded
        """
        try:
            # Add "Астана" to the address if not present
            if "астана" not in address.lower() and "astana" not in address.lower():
                address = f"Астана, {address}"
                
            # Try to geocode with retries
            max_retries = 3
            for attempt in range(max_retries):
                try:
                    location = self.geocoder.geocode(address)
                    if location:
                        return (location.latitude, location.longitude)
                    time.sleep(1)  # Wait between retries
                except (GeocoderTimedOut, GeocoderUnavailable):
                    if attempt == max_retries - 1:
                        raise
                    time.sleep(1)
                    
            raise ValueError(f"Could not find coordinates for address: {address}")
            
        except Exception as e:
            raise ValueError(f"Error geocoding address: {str(e)}")

    def point_in_polygon(self, point: Tuple[float, float], polygon: List[List[float]]) -> bool:
        """
        Check if a point is inside a polygon using ray casting algorithm
        
        Args:
            point: Tuple of (latitude, longitude)
            polygon: List of polygon coordinates as [[lat, lon], ...]
            
        Returns:
            bool: True if point is inside polygon, False otherwise
        """
        x, y = point[1], point[0]  # Convert to lon, lat for checking
        inside = False
        
        for i in range(len(polygon)):
            j = (i - 1) if i > 0 else (len(polygon) - 1)
            
            xi, yi = polygon[i][1], polygon[i][0]
            xj, yj = polygon[j][1], polygon[j][0]
            
            intersect = ((yi > y) != (yj > y)) and \
                       (x < (xj - xi) * (y - yi) / (yj - yi) + xi)
            if intersect:
                inside = not inside
                
        return inside

    def get_delivery_info_by_address(self, address: str) -> Dict:
        """
        Get delivery zone information for a given address
        
        Args:
            address: String address to check
            
        Returns:
            Dict containing:
            - zone_color: str
            - min_free_delivery: float
            - delivery_cost: float
            - restaurant: str
            - coordinates: Tuple[float, float]
            - address: str
        """
        try:
            # Get coordinates for address
            coords = self.geocode_address(address)
            
            # Get zone information
            delivery_info = self.get_delivery_info(coords)
            
            # Add address and coordinates to response
            delivery_info.update({
                'coordinates': coords,
                'address': address
            })
            return delivery_info
            
        except ValueError as e:
            return {
                'error': str(e),
                'zone_color': 'red',  # Default to red zone on error
                'min_free_delivery': None,
                'delivery_cost': 1590,
                'restaurant': None,
                'address': address
            }

    def get_delivery_info(self, coords: Tuple[float, float]) -> Dict:
        """
        Get delivery zone information for given coordinates
        
        Args:
            coords: Tuple of (latitude, longitude)
            
        Returns:
            Dict with zone information including:
            - zone_color: str
            - min_free_delivery: float
            - delivery_cost: float
            - restaurant: str
        """
        for restaurant, zones in self.zones.items():
            for color, polygon in zones.items():
                if self.point_in_polygon(coords, polygon):
                    return self._get_zone_details(color, restaurant)
        
        # Default to red zone if not in any polygon
        return self._get_zone_details('red', None)

    def _get_zone_details(self, zone_color: str, restaurant: str) -> Dict:
        """Get delivery costs and minimums for each zone"""
        zone_info = {
            'green': {
                'min_free_delivery': 8000,
                'delivery_cost': 850
            },
            'yellow': {
                'min_free_delivery': 10000,
                'delivery_cost': 1000
            },
            'blue': {
                'min_free_delivery': 14000,
                'delivery_cost': 1250
            },
            'red': {
                'min_free_delivery': None,
                'delivery_cost': 1590
            }
        }
        
        return {
            'zone_color': zone_color,
            'min_free_delivery': zone_info[zone_color]['min_free_delivery'],
            'delivery_cost': zone_info[zone_color]['delivery_cost'],
            'restaurant': restaurant
        }

# Example usage
if __name__ == "__main__":
    calculator = DeliveryZoneCalculator()
    
    # Example address
    test_addresses = ["туран 49", "баранова 9", "туран 9", "Guardian Angels Catholic School, 1843 W 52nd Ave, Denver, CO 80221, United States", "туран 9", "туран 9", "проспект Мангилик Ел 55/2, Астана"]  
    for test_address in test_addresses:
        try:
            # Get delivery information by address
            delivery_info = calculator.get_delivery_info_by_address(test_address)
            
            # Print results
            print(f"Address: {delivery_info['address']}")
            print(f"Coordinates: {delivery_info['coordinates']}")
            print(f"Zone Color: {delivery_info['zone_color']}")
            print(f"Restaurant: {delivery_info['restaurant']}")
            if delivery_info['min_free_delivery']:
                print(f"Free delivery for orders over {delivery_info['min_free_delivery']}₸")
            print(f"Delivery cost: {delivery_info['delivery_cost']}₸")

            print('-'*40)
            
        except Exception as e:
            print(f"Error: {str(e)}")